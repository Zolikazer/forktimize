name: Deploy Forktimize 🚀

on:
  push:
    branches: [master]

jobs:
  test:
      name: 🧪 Run tests
      runs-on: ubuntu-latest

      steps:
        - name: 🧲 Checkout code
          uses: actions/checkout@v3

        - name: 🐍 Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.12"

        - name: 🧪 Install backend dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r backend/requirements.txt

        - name: ✅ Run backend tests
          run: pytest

        - name: 📦 Install frontend deps
          working-directory: frontend
          run: npm ci

        - name: 🧪 Run frontend tests
          working-directory: frontend
          run: npm test

        - name: 🚀 Start FastAPI backend
          working-directory: backend
          run: |
            uvicorn main:app &
            sleep 5

        - name: 🚀 Run e2e tests
          working-directory: frontend
          run: |
            npx playwright install --with-deps
            VITE_API_URL=http://localhost:8000/api npm run test:e2e

        - name: Upload Playwright test results (only on failure)
          if: failure()
          uses: actions/upload-artifact@v3
          with:
            name: playwright-artifacts
            path: frontend/test-results/


  deploy-backend:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 🚪 SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY  }}
          script: |
            cd /opt/forktimize
            git config --global --add safe.directory /opt/forktimize
            ./update_deployment.sh

  deploy-frontend:
    runs-on: ubuntu-latest
    needs:
      - deploy-backend
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel

      - name: 🌍 Deploy frontend to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel deploy --prod --yes --token=$VERCEL_TOKEN